#pragma once
#include <memory_map.h>
#include <ioreg.h>

#define BCM2835_EMMC_BASE (unsigned long long)(BCM2835_MEM_PERIPH_BASE + 0x00300000)
#define BCM2835_EMMC_ARG2           (ioreg32_t)(BCM2835_EMMC_BASE + 0x0000)
#define BCM2835_EMMC_BLKSIZECNT     (ioreg32_t)(BCM2835_EMMC_BASE + 0x0004)
#define BCM2835_EMMC_ARG1           (ioreg32_t)(BCM2835_EMMC_BASE + 0x0008)
#define BCM2835_EMMC_CMDTM          (ioreg32_t)(BCM2835_EMMC_BASE + 0x000c)
#define BCM2835_EMMC_RESP0          (ioreg32_t)(BCM2835_EMMC_BASE + 0x0010)
#define BCM2835_EMMC_RESP1          (ioreg32_t)(BCM2835_EMMC_BASE + 0x0014)
#define BCM2835_EMMC_RESP2          (ioreg32_t)(BCM2835_EMMC_BASE + 0x0018)
#define BCM2835_EMMC_RESP3          (ioreg32_t)(BCM2835_EMMC_BASE + 0x001c)
#define BCM2835_EMMC_DATA           (ioreg32_t)(BCM2835_EMMC_BASE + 0x0020)
#define BCM2835_EMMC_STATUS         (ioreg32_t)(BCM2835_EMMC_BASE + 0x0024)
#define BCM2835_EMMC_CONTROL0       (ioreg32_t)(BCM2835_EMMC_BASE + 0x0028)
#define BCM2835_EMMC_CONTROL1       (ioreg32_t)(BCM2835_EMMC_BASE + 0x002c)
#define BCM2835_EMMC_INTERRUPT      (ioreg32_t)(BCM2835_EMMC_BASE + 0x0030)
#define BCM2835_EMMC_IRPT_MASK      (ioreg32_t)(BCM2835_EMMC_BASE + 0x0034)
#define BCM2835_EMMC_IRPT_EN        (ioreg32_t)(BCM2835_EMMC_BASE + 0x0038)
#define BCM2835_EMMC_CONTROL2       (ioreg32_t)(BCM2835_EMMC_BASE + 0x003c)
#define BCM2835_EMMC_CAPABILITIES_0 (ioreg32_t)(BCM2835_EMMC_BASE + 0x0040)
#define BCM2835_EMMC_CAPABILITIES_1 (ioreg32_t)(BCM2835_EMMC_BASE + 0x0044)
#define BCM2835_EMMC_FORCE_IRPT     (ioreg32_t)(BCM2835_EMMC_BASE + 0x0050)
#define BCM2835_EMMC_BOOT_TIMEOUT   (ioreg32_t)(BCM2835_EMMC_BASE + 0x0070)
#define BCM2835_EMMC_DBG_SEL        (ioreg32_t)(BCM2835_EMMC_BASE + 0x0074)
#define BCM2835_EMMC_EXRDFIFO_CFG   (ioreg32_t)(BCM2835_EMMC_BASE + 0x0080)
#define BCM2835_EMMC_EXRDFIFO_EN    (ioreg32_t)(BCM2835_EMMC_BASE + 0x0084)
#define BCM2835_EMMC_TUNE_STEP      (ioreg32_t)(BCM2835_EMMC_BASE + 0x0088)
#define BCM2835_EMMC_TUNE_STEPS_STD (ioreg32_t)(BCM2835_EMMC_BASE + 0x008c)
#define BCM2835_EMMC_TUNE_STEPS_DDR (ioreg32_t)(BCM2835_EMMC_BASE + 0x0090)
#define BCM2835_EMMC_SPI_INT_SPT    (ioreg32_t)(BCM2835_EMMC_BASE + 0x00f0)
#define BCM2835_EMMC_SLOTISR_VER    (ioreg32_t)(BCM2835_EMMC_BASE + 0x00fc)

#define BCM2835_EMMC_CONTROL1_SRST_HC 24

#define BCM2835_EMMC_RESPONSE_TYPE_NONE         0b00
#define BCM2835_EMMC_RESPONSE_TYPE_136_BITS     0b01
#define BCM2835_EMMC_RESPONSE_TYPE_48_BITS      0b10
#define BCM2835_EMMC_RESPONSE_TYPE_48_BITS_BUSY 0b11

#define BCM2835_EMMC_STATE_IDLE  0
#define BCM2835_EMMC_STATE_READY 1
#define BCM2835_EMMC_STATE_IDENT 2
#define BCM2835_EMMC_STATE_STBY  3
#define BCM2835_EMMC_STATE_TRAN  4
#define BCM2835_EMMC_STATE_DATA  5
#define BCM2835_EMMC_STATE_RCV   6
#define BCM2835_EMMC_STATE_PRG   7
#define BCM2835_EMMC_STATE_DIS   8

static inline const char *bcm2835_emmc_state_to_string(int state)
{
  switch(state) {
    case BCM2835_EMMC_STATE_IDLE: return "IDLE";
    case BCM2835_EMMC_STATE_READY: return "READY";
    case BCM2835_EMMC_STATE_IDENT: return "IDENT";
    case BCM2835_EMMC_STATE_STBY: return "STBY";
    case BCM2835_EMMC_STATE_TRAN: return "TRAN";
    case BCM2835_EMMC_STATE_DATA: return "DATA";
    case BCM2835_EMMC_STATE_RCV: return "RCV";
    case BCM2835_EMMC_STATE_PRG: return "PRG";
    case BCM2835_EMMC_STATE_DIS: return "DIS";
    default: return "UNKNOWN";
  }
}
